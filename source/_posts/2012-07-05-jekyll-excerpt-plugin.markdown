---
layout: post
title: Jekyll excerpt plugin
description: 
keywords: jekyll, tips, plugin, excerpt
gplus: https://plus.google.com/116661482374124481456/posts/B7BoVX3Rjqd
published: true
date: 2012-07-05 17:22:47
tags:
  - jekyll
  - tips
  - develop
---

Сегодня в очередной раз занимался изменением оформления главной страницы сайта. Я уже предпринимал попытки по внедрению отображения только кусочков текста из статей на этой странице. Но несколько раз неудачно.

Проблема заключается в том, что Jekyll не предоставляет по умолчанию инструментов для работы со структурой текста. И можно использовать только простейшие операторы выделения куска текста определенной длины.

<!--more-->

Делается это довольно просто, достаточно только использовать фильтры, что-то вроде:

<script src="https://gist.github.com/3053900.js?file=post.html"></script>

Первый фильтр `strip_html` удаляет все html-теги, а второй фильтр `truncatewords` обрезает текст на 25 символе. Проблема заключается в том, что убрав все html-теги, мы фактически сливаем текст в одну массу. И на выходе получаем один параграф, в котором может содержаться кусок кода, если тот содержался в начале статьи.

Если же html-теги не убирать, то в исходной странице можно получить массу ошибок с незакрытыми тегами. Все случайно и зависит от самого содержимого страницы.

В Octopress уже присутствует дополнительный фильтр `excerpt`, который позволяет использовать в коде статьи тег:

    <!--more-->

Именно этот тег используется в Wordpress для разделения той части текста, что нужно показывать на главной от основной части текста. Для того, чтобы использовать данный фильтр в Jekyll, необходимо добавить один файл в папку `_plugins`:

<script src="https://gist.github.com/986665.js?file=excerpt.rb"></script>

После чего в коде статьи можно использовать тег `<!--more-->` для обозначения места, где необходимо сделать разделение текста.

Причем в коде шаблона для отображения статьи сайта уже можно использовать следующую конструкцию:

<script src="https://gist.github.com/986665.js?file=post.html"></script>

Таким образом добавив один плагин, мы получаем возможность самостоятельно управлять, где именно необходимо разрывать текст для отображения его на главной странице сайта и избавляемся от возможных ошибок в коде страниц.